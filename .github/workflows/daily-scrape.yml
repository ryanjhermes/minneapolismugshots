name: Daily Jail Roster Scrape

on:
  schedule:
    # Run daily at 11:00 PM Central Time (4:00 AM UTC next day)
    - cron: '0 4 * * *'
  workflow_dispatch: # Allow manual trigger
  push:
    branches: [ main ] # Also run on push for testing

jobs:
  scrape-and-deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write # Allow pushing to repository
      pages: write   # Allow GitHub Pages deployment
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Chrome
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create .env file with secrets
      run: |
        echo "ACCESS_TOKEN=${{ secrets.META_ACCESS_TOKEN }}" >> .env
        echo "APP_ID=${{ secrets.META_APP_ID }}" >> .env
        echo "BUSINESS_ID=${{ secrets.META_BUSINESS_ID }}" >> .env
    
    - name: Run jail roster scraper and create posting queue
      run: |
        echo "üöÄ Starting jail roster scraping and queue creation..."
        python data.py
        echo "‚úÖ Scraping completed, posting queue created"
    
    - name: Create GitHub Pages structure
      run: |
        mkdir -p docs
        # Ensure mugshots directory exists before copying
        if [ -d "mugshots" ]; then
          echo "üìÅ Copying mugshots directory to docs..."
          cp -r mugshots docs/
          echo "‚úÖ Mugshots copied: $(ls -1 mugshots/*.jpg 2>/dev/null | wc -l) files"
        else
          echo "‚ö†Ô∏è  Mugshots directory not found, creating empty one..."
          mkdir -p docs/mugshots
        fi
        cp jail_roster_data.csv docs/
        echo '<!DOCTYPE html>
        <html>
        <head>
            <title>Minneapolis Mugshots Data</title>
            <meta charset="utf-8">
        </head>
        <body>
            <h1>Minneapolis Jail Roster Data</h1>
            <p>Last updated: '"$(date)"'</p>
            <ul>
                <li><a href="jail_roster_data.csv">Download CSV Data</a></li>
                <li><a href="mugshots/">View Mugshots Folder</a></li>
            </ul>
        </body>
        </html>' > docs/index.html
    
    - name: Generate mugshots index
      run: |
        cd docs/mugshots
        echo '<!DOCTYPE html>
        <html>
        <head>
            <title>Mugshots Directory</title>
            <meta charset="utf-8">
        </head>
        <body>
            <h1>Mugshots Directory</h1>
            <p>Last updated: '"$(date)"'</p>
            <ul>' > index.html
        for img in *.jpg; do
          if [ -f "$img" ]; then
            echo "                <li><a href=\"$img\">$img</a></li>" >> index.html
          fi
        done
        echo '            </ul>
        </body>
        </html>' >> index.html
    
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Debug: Check what files we have
        echo "üîç DEBUG: Files to commit:"
        echo "üìÑ CSV file: $(ls -la jail_roster_data.csv 2>/dev/null || echo 'Not found')"
        echo "üìÅ Mugshots directory: $(ls -la mugshots/ 2>/dev/null | head -5 || echo 'Not found')"
        echo "üìÑ Queue file: $(ls -la posting_queue.json 2>/dev/null || echo 'Not found')"
        
        git add .
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          echo "üìù Committing changes..."
          git status --porcelain
          git commit -m "Daily jail roster update - $(date '+%Y-%m-%d %H:%M:%S')"
          # Try to push, and if it fails due to conflicts, pull and push again
          if ! git push; then
            echo "Push failed, pulling latest changes and trying again..."
            git pull --rebase origin main
            git push
          fi
          echo "‚úÖ Changes committed and pushed"
        fi
    
    - name: Setup GitHub Pages
      uses: actions/configure-pages@v4
    
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4 